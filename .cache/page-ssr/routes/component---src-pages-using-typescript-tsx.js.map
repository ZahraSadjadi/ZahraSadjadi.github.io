{"version":3,"file":"component---src-pages-using-typescript-tsx.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/pages/using-typescript.tsx","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\r\nimport * as React from \"react\"\r\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\n\r\ntype DataProps = {\r\n  site: {\r\n    buildTime: string\r\n  }\r\n}\r\n\r\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\r\n  data,\r\n  path,\r\n  location,\r\n}) => (\r\n  <Layout title=\"Using TypeScript\" location={location}>\r\n    <h1>Gatsby supports TypeScript by default!</h1>\r\n    <p>\r\n      This means that you can create and write <code>.ts/.tsx</code> files for\r\n      your pages, components, and <code>gatsby-*</code> configuration files (for\r\n      example <code>gatsby-config.ts</code>).\r\n    </p>\r\n    <p>\r\n      For type checking you'll want to install <em>typescript</em> via npm and\r\n      run <em>tsc --init</em> to create a <em>tsconfig</em> file.\r\n    </p>\r\n    <p>\r\n      You're currently on the page \"{path}\" which was built on{\" \"}\r\n      {data.site.buildTime}.\r\n    </p>\r\n    <p>\r\n      To learn more, head over to our{\" \"}\r\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\r\n        documentation about TypeScript\r\n      </a>\r\n      .\r\n    </p>\r\n    <Link to=\"/\">Go back to the homepage</Link>\r\n  </Layout>\r\n)\r\n\r\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" />\r\n\r\nexport default UsingTypescript\r\n\r\nexport const query = graphql`\r\n  {\r\n    site {\r\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\r\n    }\r\n  }\r\n`\r\n","import * as React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nconst Layout = ({ location, title, children }) => {\r\n  const rootPath = `${__PATH_PREFIX__}/`\r\n  const isRootPath = location.pathname === rootPath\r\n  let header\r\n\r\n  if (isRootPath) {\r\n    header = (\r\n      <h1 className=\"main-heading\">\r\n        <Link to=\"/\">{title}</Link>\r\n      </h1>\r\n    )\r\n  } else {\r\n    header = (\r\n      <Link className=\"header-link-home\" to=\"/\">\r\n        {title}\r\n      </Link>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\r\n      <header className=\"global-header\">{header}</header>\r\n      <main>{children}</main>\r\n      <footer>\r\n        Â© {new Date().getFullYear()}, Built with\r\n        {` `}\r\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","/**\r\n * SEO component that queries for data with\r\n * Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst Seo = ({ description, title, children }) => {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            social {\r\n              twitter\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <>\r\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\r\n      <meta name=\"description\" content={metaDescription} />\r\n      <meta property=\"og:title\" content={title} />\r\n      <meta property=\"og:description\" content={metaDescription} />\r\n      <meta property=\"og:type\" content=\"website\" />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta\r\n        name=\"twitter:creator\"\r\n        content={site.siteMetadata?.social?.twitter || ``}\r\n      />\r\n      <meta name=\"twitter:title\" content={title} />\r\n      <meta name=\"twitter:description\" content={metaDescription} />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seo\r\n"],"names":["React","Link","Layout","Seo","UsingTypescript","data","path","location","createElement","title","site","buildTime","href","to","Head","query","children","rootPath","__PATH_PREFIX__","isRootPath","pathname","header","className","Date","getFullYear","useStaticQuery","description","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","metaDescription","siteMetadata","defaultTitle","Fragment","name","content","property","social","twitter"],"sourceRoot":""}